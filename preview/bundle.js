(()=>{"use strict";var e={590:(e,r,t)=>{r.EM=r.uG=void 0;const i=t(299),n=t(991),o=t(549),c=t(884);r.uG=function(e){if(e)return(0,i.parseNumber)(`${e}`)},r.EM=function(e,r,t){if(void 0===e)return;if(null===e)return;const i=Number(e);return isNaN(i)?void 0:(0,c.toChinese)(i,r||o.Style.Small,t||n.Script.Traditional)}},774:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mapDigit=void 0,r.mapDigit=function(e){const r=[...e].map((e=>{switch(e){case"一":case"壹":case"乙":case"1":case"１":return 1;case"二":case"貳":case"貮":case"贰":case"兩":case"两":case"2":case"２":return 2;case"三":case"參":case"叁":case"参":case"叄":case"3":case"３":return 3;case"四":case"肆":case"4":case"４":return 4;case"五":case"伍":case"5":case"５":return 5;case"六":case"陸":case"陆":case"6":case"６":return 6;case"七":case"柒":case"7":case"７":return 7;case"八":case"捌":case"8":case"８":return 8;case"九":case"玖":case"9":case"９":return 9;case"零":case"〇":case"0":case"０":return 0;default:return}}));if(!r.includes(void 0))return r.join("")}},843:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parseBig=void 0;const i=t(739);r.parseBig=function(e){const r=/(?:([^兆]*)兆)?(?:([^億亿]*)[億亿])?([零０0])?(.*)/.exec(e.replace(/萬萬/g,"億"));if(!r)return;const t=r[1],n=void 0!==t?t?(0,i.parseMiddle)(t):1:0;if(void 0===n)return;const o=r[2],c=void 0!==o?o?(0,i.parseMiddle)(o):1:0;if(void 0===c)return;const a=r[3],s=r[4],l=s?(0,i.parseMiddle)(s):0;if(void 0!==l){if(a||/[萬万千仟百佰十拾]/.exec(s||""))return 1e12*n+1e8*c+l;{const e=void 0!==o?1e7:void 0!==t?1e11:void 0;return void 0!==e?1e12*n+1e8*c+l*(e/(s?.length>=2?Math.pow(10,s.length-1):1)):l}}}},417:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parseDigit=void 0;const i=t(774);r.parseDigit=function(e){const r=(0,i.mapDigit)(e);if(void 0!==r)return parseInt(r)}},739:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parseMiddle=void 0;const i=t(890);r.parseMiddle=function(e){const r=/(?:([^萬万]*)[萬万])?([零０0])?(.*)?/.exec(e);if(!r)return;const t=r[1],n=void 0!==t?t?(0,i.parseSmall)(t):1:0;if(void 0===n)return;const o=r[2],c=r[3],a=c?(0,i.parseSmall)(c):0;return void 0!==a?o||/[千仟百佰十拾]/.exec(c||"")?1e4*n+a:void 0!==t?1e4*n+a*(1e3/(c?.length>=2?Math.pow(10,c.length-1):1)):a:void 0}},299:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parseNumber=void 0;const i=t(774),n=t(843);r.parseNumber=function(e){const r=/([負负-])?(.*?)(?:[點点.．]([^點点.．]*))?$/.exec(e);if(!r)return;const t=r[1]?-1:1,o=r[2],c=o?(0,n.parseBig)(o):0;if(void 0===c)return;const a=r[3],s=a?(0,i.mapDigit)(a):"0";return void 0!==s?t*(c+parseFloat(`0.${s||"0"}`)):void 0}},890:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parseSmall=void 0;const i=t(417);r.parseSmall=function(e){const r=/(?:([^千仟]*)[千仟])?(?:([^百佰]*)[百佰])?(?:([^十拾]*)[十拾])?([零０0])?(.*)?/.exec(e.replace(/廿/g,"二十").replace(/卅/g,"三十"));if(!r)return;const t=r[1],n=void 0!==t?t?(0,i.parseDigit)(t):1:0;if(void 0===n)return;const o=r[2],c=void 0!==o?o?(0,i.parseDigit)(o):1:0;if(void 0===c)return;const a=r[3],s=void 0!==a?a?(0,i.parseDigit)(a):1:0;if(void 0===s)return;const l=r[4],u=r[5],d=u?(0,i.parseDigit)(u):0;if(void 0!==d){if(l)return 1e3*n+100*c+10*s+d;{const e=void 0!==a?1:void 0!==o?10:void 0!==t?100:void 0;return void 0!==e?1e3*n+100*c+10*s+d*(e/(u?.length>=2?Math.pow(10,u.length-1):1)):d}}}},168:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.printBig=void 0;const i=t(349),n=t(991),o=t(549);r.printBig=function(e,r=o.Style.Small,t=n.Script.Traditional){if(e.length>16)throw new Error(`cannot convert to Chinese as value ${e} is too big`);const c=e.slice(-4),a=c?(0,i.printSmall)(c,r,t):"",s=e.slice(-8,-4),l=s?(0,i.printSmall)(s,r,t)+(t===n.Script.Traditional?"萬":"万"):"",u=e.slice(-12,-8),d=u?(0,i.printSmall)(u,r,t)+(t===n.Script.Traditional?"億":"亿"):"",p=e.slice(-16,-12);return`${p?(0,i.printSmall)(p,r,t)+"兆":""}${d}${l}${a}`.replace(/(零[萬万億亿兆]?)+/,"零").replace(/零+$/,"")||"零"}},565:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.printDigit=void 0;const i=t(991),n=t(549);r.printDigit=function(e,r=n.Style.Small,t=i.Script.Traditional){switch(e){case"1":return r===n.Style.Big?"壹":"一";case"2":return r===n.Style.Big?t===i.Script.Traditional?"貳":"贰":"二";case"3":return r===n.Style.Big?"參":"三";case"4":return r===n.Style.Big?"肆":"四";case"5":return r===n.Style.Big?"伍":"五";case"6":return r===n.Style.Big?t===i.Script.Traditional?"陸":"陆":"六";case"7":return r===n.Style.Big?"柒":"七";case"8":return r===n.Style.Big?"捌":"八";case"9":return r===n.Style.Big?"玖":"九";case"0":return"零";default:return""}}},349:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.printSmall=void 0;const i=t(565),n=t(991),o=t(549);r.printSmall=function(e,r=o.Style.Small,t=n.Script.Traditional){if(e.length>4)throw new Error(`cannot convert to Chinese as value ${e} is too big`);const c=[...e].reverse().map(((e,n)=>{if("0"===e)return"零";const c=(0,i.printDigit)(e,r,t);switch(n){case 0:return c;case 1:return c+(r===o.Style.Big?"拾":"十");case 2:return c+(r===o.Style.Big?"佰":"百");case 3:return c+(r===o.Style.Big?"仟":"千");default:throw new Error}})).reverse();return c.every((e=>"零"===e))?"零":c.join("").replace(/零+/,"零").replace(/零+$/,"")}},991:(e,r)=>{var t;Object.defineProperty(r,"__esModule",{value:!0}),r.Script=void 0,(t=r.Script||(r.Script={})).Traditional="traditional",t.Simplified="simplified"},549:(e,r)=>{var t;Object.defineProperty(r,"__esModule",{value:!0}),r.Style=void 0,(t=r.Style||(r.Style={})).Small="small",t.Big="big"},390:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.toArabic=void 0,r.toArabic=function(e){const r=e.toString(),t=/(-?)(\d+)(?:\.(\d+))?e([+-])(\d+)/.exec(r);if(!t)return r;const i=t[1],n=t[2],o=t[3]||"",c=t[4],a=t[5],s=parseInt(a);if("+"===c){const e=`${o}${"0".repeat(s)}`.substring(0,s),r=`${o}`.substring(s);return r?`${i}${n}${e}.${r}`:`${i}${n}${e}`}return`${i}0.${"0".repeat(s-1)}${n}${o}`}},884:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.toChinese=void 0;const i=t(168),n=t(565),o=t(991),c=t(549),a=t(390);r.toChinese=function(e,r=c.Style.Small,t=o.Script.Traditional){const s=(0,a.toArabic)(e),l=/(-?)(\d+)(?:\.(\d+))?/.exec(s);if(!l)throw new Error("should match anyways");const u=l[1]?t===o.Script.Traditional?"負":"负":"",d=l[2],p=(0,i.printBig)(d,r,t),v=[...l[3]||""].map((e=>(0,n.printDigit)(e,r,t))).join("");return`${u}${p}${v?(t===o.Script.Traditional?"點":"点")+v:""}`}}},r={};function t(i){var n=r[i];if(void 0!==n)return n.exports;var o=r[i]={exports:{}};return e[i](o,o.exports,t),o.exports}(()=>{var e=t(590),r=t(390);const i=JSON.parse('["四百二","千一二","一二三","一二三4","三億五千萬","一千二百三十四萬五千六百七十八","三兆五仟零七億９千萬","一萬億","七二一","八三一","十點一","三萬二千點七","負十二點三","负柒佰柒拾柒","五十六","拾四亿","七七四十九","九九八十一"]'),n=document.querySelector(".card.parse"),o=n.querySelector("input"),c=n.querySelector(".output"),a=n.querySelector(".code");function s(){const t=(0,e.uG)(o.value);if(void 0===t)return n.classList.add("error"),void l(a,`parseChineseNumber('${o.value}') = undefined`);const i=t.toString();return l(c,i),n.classList.remove("error"),l(a,`parseChineseNumber('${o.value}') = ${(0,r.toArabic)(t)}`),t}function l(e,r){e.innerText!==r&&(e.innerText=r)}n.onclick=()=>o.focus(),setInterval(s,50);const u=document.querySelector(".card.print"),d=u.querySelector("input"),p=u.querySelector(".output"),v=u.querySelector(".code");function f(){const t=Number(d.value);if(isNaN(t))return u.classList.add("error"),void l(v,"toChineseNumber(NaN) = undefined");const i=(0,e.EM)(t);l(p,i),u.classList.remove("error"),l(v,`toChineseNumber(${(0,r.toArabic)(t)}) = ${i}`)}u.onclick=()=>d.focus(),setInterval(f,50);const S=document.querySelector(".next");let g=0;S.onclick=()=>{const e=i[g++%i.length];o.value=e;const r=s();d.value=r,f()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,